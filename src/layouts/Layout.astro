---
import '@styles/global.css';
import '@fontsource/ibm-plex-mono';
import Header from '@components/Header.astro';
import Footer from '@components/Footer.astro';
import { SEO } from 'astro-seo';
import { formatISO } from 'date-fns';

type Props = {
  title: string;
  description?: string;
  type?: string;
  image?: string;
  date?: Date;
  pageType: string;
};

const defaultImage = `${new URL('/phoenix.png', Astro.url)}`;

const { title, description, type, image, date, pageType } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/png" href="/phoenix.png" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <link
      rel="alternate"
      type="application/rss+xml"
      title="Varun's Musings"
      href={`${Astro.site}rss.xml`}
    />
    {
      Astro.url.pathname !== '/' && (
        <link rel="canonical" href={`https://snare.dev${Astro.url.pathname}`} />
      )
    }
    <title>{title} | Varun Narravula</title>
    <SEO
      {title}
      {description}
      charset="utf-8"
      openGraph={{
        basic: {
          title,
          type: type || 'A generic type.',
          image: image || defaultImage,
        },
        article: {
          authors: ['Varun Narravula'], // Who else? Lmao.
          publishedTime: formatISO(date || new Date()),
        },
      }}
      extend={{
        link: [{ rel: 'icon', href: '/phoenix.png' }],
        meta: [
          {
            name: 'twitter:image',
            content: image || defaultImage,
          },
          { name: 'twitter:title', content: title },
          {
            name: 'twitter:description',
            content:
              description ||
              'A generic description. What else do you want me to put here, a dinosaur?',
          },
        ],
      }}
    />
    <style>
      .page-container {
        align-self: flex-start;
        flex-grow: 1;
        width: 90%;
        max-width: 80ch;
        margin: 0 auto;
      }

      @media (width <= 80ch) {
        .page-container {
          margin-left: 1em;
          margin-right: 1em;
        }
      }
    </style>
    <script
      data-goatcounter="https://watersucks.goatcounter.com/count"
      is:inline
      async
      src="//gc.zgo.at/count.js"></script>
    <script is:inline>
      let scrollAmount = window.innerHeight * 0.1;
      let pendingCount = '';

      function updateScrollAmount() {
        scrollAmount = window.innerHeight * 0.1;
      }

      window.addEventListener('resize', updateScrollAmount);

      window.addEventListener('keydown', (e) => {
        const target = e.target;

        if (
          target.tagName === 'INPUT' ||
          target.tagName === 'TEXTAREA' ||
          target.isContentEditable
        )
          return;

        const key = e.key;

        // If number key pressed (but not 0 as the first digit)
        if (/^[1-9]$/.test(key) || (pendingCount && key === '0')) {
          pendingCount += key;
          e.preventDefault();
          return;
        }

        const count = pendingCount ? parseInt(pendingCount, 10) : 1;

        if (key === 'j') {
          window.scrollBy({ top: scrollAmount * count });
          pendingCount = '';
          e.preventDefault();
        } else if (key === 'k') {
          window.scrollBy({ top: -scrollAmount * count });
          pendingCount = '';
          e.preventDefault();
        } else {
          // Reset if key doesn't match
          pendingCount = '';
        }
      });
    </script>
  </head>
  <body>
    <Header />
    <div class="page-container">
      <slot />
    </div>
    <Footer {pageType} />
  </body>
</html>
